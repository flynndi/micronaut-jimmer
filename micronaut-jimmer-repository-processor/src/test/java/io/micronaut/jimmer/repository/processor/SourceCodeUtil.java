package io.micronaut.jimmer.repository.processor;

import io.micronaut.sourcegen.bytecode.ByteCodeWriter;
import io.micronaut.sourcegen.model.ObjectDef;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.file.Files;
import java.util.Map;
import java.util.jar.Manifest;
import org.jetbrains.java.decompiler.main.DecompilerContext;
import org.jetbrains.java.decompiler.main.Fernflower;
import org.jetbrains.java.decompiler.main.decompiler.PrintStreamLogger;
import org.jetbrains.java.decompiler.main.extern.IResultSaver;
import org.jetbrains.java.decompiler.util.InterpreterUtil;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.util.CheckClassAdapter;
import org.objectweb.asm.util.TraceClassVisitor;

/**
 *
 *
 * <pre>{@code
 * StringWriter bytecodeOutput = new StringWriter();
 * byte[] bytecode = generateFileWithTrace(classDefBuilder.build(), bytecodeOutput);
 *
 * String readableBytecode = bytecodeOutput.toString();
 * System.out.println("--- Generated Bytecode Instructions ---");
 * System.out.println(readableBytecode);
 * System.out.println("-------------------------------------");
 *
 * String decompiledJava = decompileToJava(bytecode);
 * System.out.println("--- Decompiled Java Source ---");
 * System.out.println(decompiledJava);
 * System.out.println("------------------------------");
 *
 * }</pre>
 */
public class SourceCodeUtil {

    public static byte[] generateFileWithTrace(ObjectDef objectDef, StringWriter stringWriter) {
        var classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);
        var checkClassAdapter = new CheckClassAdapter(classWriter);
        var traceVisitor = new TraceClassVisitor(checkClassAdapter, new PrintWriter(stringWriter));
        new ByteCodeWriter(false, false).writeObject(traceVisitor, objectDef);
        traceVisitor.visitEnd();
        return classWriter.toByteArray();
    }

    public static String decompileToJava(byte[] bytecode) {
        String[] result = new String[1];
        Fernflower fernflower =
                new Fernflower(
                        (s, s1) -> bytecode,
                        new IResultSaver() {
                            @Override
                            public void saveFolder(String s) {}

                            @Override
                            public void copyFile(String source, String path, String entryName) {
                                try {
                                    InterpreterUtil.copyFile(
                                            new File(source),
                                            new File(getAbsolutePath(path), entryName));
                                } catch (IOException ex) {
                                    DecompilerContext.getLogger()
                                            .writeMessage(
                                                    "Cannot copy " + source + " to " + entryName,
                                                    ex);
                                }
                            }

                            private String getAbsolutePath(String path) {
                                return new File(path).getAbsolutePath();
                            }

                            @Override
                            public void saveClassFile(
                                    String s, String s1, String s2, String s3, int[] ints) {
                                result[0] = s3.replace("\r\n", "\n");
                            }

                            @Override
                            public void createArchive(String s, String s1, Manifest manifest) {}

                            @Override
                            public void saveDirEntry(String s, String s1, String s2) {}

                            @Override
                            public void copyEntry(String s, String s1, String s2, String s3) {}

                            @Override
                            public void saveClassEntry(
                                    String s, String s1, String s2, String s3, String s4) {}

                            @Override
                            public void closeArchive(String s, String s1) {}
                        },
                        Map.of(),
                        new PrintStreamLogger(System.out));
        try {
            File tempFile = File.createTempFile("ffffff", ".class");
            Files.write(tempFile.toPath(), bytecode);
            fernflower.addSource(tempFile);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        fernflower.decompileContext();
        return result[0];
    }
}
